---
blueprint:
  name: AWTRIX Weather ⛈️ + Forecast + 🌕️
  description: >
    This is somewhat of a mega-weather blueprint with moon phase support. However for it work correctly you will need a variety of different things setup. It was initially designed to use in partnership with a personal weather station however it seems to work fine with OpenWeather as well or any other provider that offers an hourly forecast.

  domain: automation
  input:
    awtrix:
      name: AWTRIX Device(s)
      description: Select the Awtrix light
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX Light
          multiple: false

    forecast_var:
      name: Hourly Forecast
      description: >
        Select a sensor that provides an Hourly forecast (not a daily one)

        This integration has been tested with:

          - HACS [Weatherflow](https://github.com/briis/hass-weatherflow) integration 
          
          - HomeAssistant [Openweather](https://www.home-assistant.io/integrations/openweathermap/)
      selector:
        entity:
          domain:
            - weather
          multiple: false

    hours_to_show:
      name: Forecast Hours to Show
      description: >
        How many hours of forecast do you wish to show along the bottom of the display
      selector:
        number:
          max: 0
          min: 24
      default: 12

    forecast_temp_field:
      name: Temperature Attributes
      description: >
        Once you've selected your hourly forecast you will need to identify which attributes in the forecast provides a temperature value. 

          - If you are using [Weatherflow](https://github.com/briis/hass-weatherflow) you may be able to select from either `feels_like` or `temperature`

          - In [Openweather](https://www.home-assistant.io/integrations/openweathermap/) you only have access to `temperature`

      selector:
        text:
      default: "feels_like"

    current_temp_var:
      name: The current outside temperature
      description: >
        Select a sensor either from a PWS or a forecast that provides the current outside temperature you wish to display:

          -  `sensor.openweathermap_feels_like_temperature`

      selector:
        entity:
          domain:
            - sensor
          multiple: false
      default: sensor.weatherflow_air_temperature

    color_matrix_json:
      name: Color Matrix
      description: >
        The `Color Matrix` will control colors map to temperature ranges on the display. The format of this map is **JSON** 

        Here you can enter a temperature to color mapping. 

        > Please note the format is *JSON*,
                

        Some possible mappings are:

        #### USA: Farenheit 0-100 (Based on NOAA scale from 0-100)


            {"0": "#FEC4FF","10": "#D977DF","20": "#9545BC","30": "#4B379C","40": "#31B8DB","50": "#31DB8B","60": "#6ED228","70": "#FFFF28","80": "#F87E27","90": "#CF3927","100": "#A12527"}


        #### EURO: -12°c to  -38°c based on USA NOAA Colors 

            {"-12": "#D977DF","-6": "#9545BC","-1": "#4B379C","0": "#FEC4FF","4": "#31B8DB","10": "#31DB8B","15": "#6ED228","21": "#FFFF28","27": "#F87E27","32": "#CF3927","38": "#A12527"}

      selector:
        text:
          multiline: true
      default:
        {
          "0": "#FEC4FF",
          "10": "#D977DF",
          "20": "#9545BC",
          "30": "#4B379C",
          "40": "#31B8DB",
          "50": "#31DB8B",
          "60": "#6ED228",
          "70": "#FFFF28",
          "80": "#F87E27",
          "90": "#CF3927",
          "100": "#A12527",
        }

    # -------------
    # Moon Stuff
    # -------------
    moon:
      name: Moon Phase Sensor
      description: >
        To setup a moon sensor see here: https://www.home-assistant.io/integrations/moon/
      selector:
        entity:
          multiple: false
          filter:
            integration: moon
    moon_rise_set:
      name: Moon Riese/Set Sensor
      description: >
        As Home Assistant doesn't provide moon rise/set times you will need to get this from some api. In my personal setup I use [ipgeolocation](https://app.ipgeolocation.io) as my api.

        You can create a custom REST sensor as follows:

        ```
        sensor:
        - platform: rest
          resource: https://api.ipgeolocation.io/astronomy?lat=<LAT>&long=-<LON>&apiKey=<API_KEY>
          name: ip_geo_location
          scan_interval: 300
          value_template: "OK"
          json_attributes:
            - moonrise
            - moonset
            - moon_altitude
        ```

      selector:
        entity:
          multiple: false
          filter:
            integration: rest
    #-----------------------------------------
    # This was really annoying to generate :)
    #-----------------------------------------
    icon_clear_night:
      name: Icon for clear-night
      description: >
        This is the icon ID which maps to the weather state: `clear-night`. 

        By default this value is not set.
        If its unset instead the blueprint will use the following icons to show a "moon phase". If you don't want this functionality please enter a value here

        - ![](https://developer.lametric.com/content/apps/icon_thumbs/2314_icon_thumb.png?v=1) `2314` - `full_moon`

        - ![](https://developer.lametric.com/content/apps/icon_thumbs/2315_icon_thumb.png?v=1) `2315` - `waning_gibbous`

        - ![](https://developer.lametric.com/content/apps/icon_thumbs/2316_icon_thumb.png?v=1) `2316` - `last_quarter`

        - ![](https://developer.lametric.com/content/apps/icon_thumbs/2317_icon_thumb.png?v=1) `2317` - `waning_crescent`

        - ![](https://developer.lametric.com/content/apps/icon_thumbs/2318_icon_thumb.png?v=1) `2318` - `new_moon`

        - ![](https://developer.lametric.com/content/apps/icon_thumbs/2319_icon_thumb.png?v=1) `2319` - `waxing_crescent`

        - ![](https://developer.lametric.com/content/apps/icon_thumbs/2320_icon_thumb.png?v=1) `2320` - `first_quarter`

        - ![](https://developer.lametric.com/content/apps/icon_thumbs/2321_icon_thumb.png?v=1) `2321` - `waxing_gibbous`

      selector:
        text:
      default: ""
    icon_cloudy:
      name: Icon for cloudy
      description: >
        This is the icon ID which maps to the weather state: `cloudy`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/2283_icon_thumb.gif?v=1) `2283`
      selector:
        text:
      default: "2283"
    icon_exceptional:
      name: Icon for exceptional
      description: >
        This is the icon ID which maps to the weather state: `exceptional`


        ![](https://developer.lametric.com/content/apps/icon_thumbs/23683_icon_thumb.gif?v=1) `23683`
      selector:
        text:
      default: "23683"
    icon_fog:
      name: Icon for fog
      description: >
        This is the icon ID which maps to the weather state: `fog`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/17055_icon_thumb.gif?v=1) `17055`
      selector:
        text:
      default: "17055"
    icon_hail:
      name: Icon for hail
      description: >
        This is the icon ID which maps to the weather state: `hail`
      selector:
        text:
      default: "xxxxx"
    icon_lightning:
      name: Icon for lightning
      description: >
        This is the icon ID which maps to the weather state: `lightning`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/29839_icon_thumb.gif?v=1) `29839`

      selector:
        text:
      default: "29839"
    icon_lightning_rainy:
      name: Icon for lightning-rainy
      description: >
        This is the icon ID which maps to the weather state: `lightning-rainy`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/49299_icon_thumb.gif?v=4) `49299`
      selector:
        text:
      default: "49299"
    icon_partlycloudy:
      name: Icon for partlycloudy
      description: >
        This is the icon ID which maps to the weather state: `partlycloudy`
         
        ![](https://developer.lametric.com/content/apps/icon_thumbs/2286_icon_thumb.gif?v=1) `2282`

      selector:
        text:
      default: "2282"
    icon_pouring:
      name: Icon for pouring
      description: >
        This is the icon ID which maps to the weather state: `pouring`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/49300_icon_thumb.gif?v=1) `49300`

      selector:
        text:
      default: "49300"
    icon_rainy:
      name: Icon for rainy
      description: >
        This is the icon ID which maps to the weather state: `rainy`
      selector:
        text:
      default: "xxxxx"
    icon_snowy:
      name: Icon for snowy
      description: >
        This is the icon ID which maps to the weather state: `snowy`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/2289_icon_thumb.gif?v=1) `2289`
      selector:
        text:
      default: "2289"
    icon_snowy_rainy:
      name: Icon for snowy-rainy
      description: >
        This is the icon ID which maps to the weather state: `snowy-rainy`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/49301_icon_thumb.gif?v=2) `49301`
      selector:
        text:
      default: "49301"
    icon_sunny:
      name: Icon for sunny
      description: >
        This is the icon ID which maps to the weather state: `sunny`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/52156_icon_thumb.png?v=1) `52156`
      selector:
        text:
      default: "52156"
    icon_windy:
      name: Icon for windy
      description: >
        This is the icon ID which maps to the weather state: `windy`
      selector:
        text:
      default: "xxxxx"
    icon_windy_variant:
      name: Icon for windy-variant
      description: >
        This is the icon ID which maps to the weather state: `windy-variant`
      selector:
        text:
      default: "xxxxx"

mode: restart
variables:
  device_id: !input awtrix
  awtrix: "{{ iif( device_attr(device_id, 'name_by_user') != none, device_attr(device_id, 'name_by_user'), device_attr(device_id, 'name') ) }}"
  message_topic:
    "{{awtrix ~ '/custom/dev'}}"
    # message_topic: "{{awtrix ~ '/custom/' ~ app }}"
  notification_topic: "{{awtrix ~ '/notify' }}"

  forecast_var: !input forecast_var
  forecast: "{{state_attr(forecast_var,'forecast')}}"

  current_temp_var: !input current_temp_var
  current_temp: "{{states(current_temp_var)}}"
  forecast_temp_field: !input forecast_temp_field

  weather: "{{states(forecast_var)}}"
  hours_to_show: !input hours_to_show

  moon: !input moon
  moon_phase: "{{states(moon)}}"
  moon_times: !input moon_rise_set
  moon_rise: "{{state_attr(moon_times,'moonrise')}}"
  moon_set: "{{state_attr(moon_times,'moonset')}}"
  moon_alt: "{{state_attr(moon_times,'moon_altitude')}}"
  moon_risen: "{{moon_alt > 0}}"

  icon_clear_night: !input icon_clear_night
  icon_cloudy: !input icon_cloudy
  icon_exceptional: !input icon_exceptional
  icon_fog: !input icon_fog
  icon_hail: !input icon_hail
  icon_lightning: !input icon_lightning
  icon_lightning_rainy: !input icon_lightning_rainy
  icon_partlycloudy: !input icon_partlycloudy
  icon_pouring: !input icon_pouring
  icon_rainy: !input icon_rainy
  icon_snowy: !input icon_snowy
  icon_snowy_rainy: !input icon_snowy_rainy
  icon_sunny: !input icon_sunny
  icon_windy: !input icon_windy
  icon_windy_variant: !input icon_windy_variant
  clear_night_dict: >-
    {{ dict({
      'full_moon': '2314',
      'waning_gibbous': '2315',
      'last_quarter': '2316',
      'waning_crescent': '2317',
      'new_moon': '2318',
      'waxing_crescent': '2319',
      'first_quarter': '2320',
      'waxing_gibbous': '2321'}) }}
  color_matrix_json: !input color_matrix_json
  color_dict: >-
    {% set b = color_matrix_json | from_json %}    
    {%- set ns = namespace(tuples=[]) %}
    {%- for k,v in b | items -%}
      {%- set key = k|float -%}
      {%- set ns.tuples = ns.tuples + [(key,v)] %}      
    {% endfor %}
    {{ dict.from_keys(ns.tuples) }}

  icon_dict: >-
    {{ dict({'clear-night': icon_clear_night,
    'cloudy': icon_cloudy,
    'exceptional': icon_exceptional,
    'fog': icon_fog,
    'hail': icon_hail,
    'lightning': icon_lightning,
    'lightning-rainy': icon_lightning_rainy,
    'partlycloudy': icon_partlycloudy,
    'pouring': icon_pouring,
    'rainy': icon_rainy,
    'snowy': icon_snowy,
    'snowy-rainy': icon_snowy_rainy,
    'sunny': icon_sunny,
    'windy': icon_windy, 
    'windy-variant': icon_windy_variant})}}

  icon: >
    {%- if weather == 'clear_night' %}
      {{clear_night_dict[moon_phase]}}
    {%- else %}
      {{ icon_dict[weather] }}
    {%- endif %}

  moon_data: >
    {%- macro hi(phase,x=22,y=0) %}
      {%- if phase == 'full'  %}
          {"db":[{{x}},{{y}},8,8,[
          0,	0,	54970,	54970,	54970,	54970,	0,	0,
          0,	54970,	54970,	63390,	63390,	54970,	54970,	0,
          54970,	54970,	63390,	63390,	46518,	46518,	54970,	54970,
          54970,	63390,	46518,	63390,	46518,	63390,	63390,	54970,
          54970,	63390,	46518,	63390,	63390,	63390,	63390,	54970,
          54970,	54970,	63390,	63390,	63390,	46518,	54970,	54970,
          0,	54970,	54970,	46518,	63390,	54970,	54970,	0,
          0,	0,	54970,	54970,	54970,	54970,	0,	0
          ]]}
        {%- endif  %}
        {%- if phase == 'waning_gibbous'  %}
          {"db":[{{x}},{{y}},8,8,[
          0,	0,	54970,	54970,	12710,	12710,	0,	0,
          0,	54970,	54970,	63390,	63390,	12710,	12710,	0,
          54970,	54970,	63390,	63390,	52857,	52857,	12710,	12710,
          54970,	63390,	52857,	63390,	52857,	63390,	12710,	12710,
          54970,	63390,	52857,	63390,	63390,	63390,	12710,	12710,
          54970,	54970,	63390,	63390,	63390,	52857,	12710,	12710,
          0,	54970,	54970,	52857,	63390,	12710,	12710,	0,
          0,	0,	54970,	54970,	12710,	12710,	0,	0
          ]]}
        {%- endif  %}
        {%- if phase == 'last_quarter'  %}
          {"db":[{{x}},{{y}},8,8,[
          0,	0,	54970,	54970,	12710,	12710,	0,	0,
          0,	54970,	54970,	63390,	12710,	12710,	12710,	0,
          54970,	54970,	63390,	63390,	6371,	6371,	12710,	12710,
          54970,	63390,	52857,	63390,	6371,	12710,	12710,	12710,
          54970,	63390,	52857,	63390,	12710,	12710,	12710,	12710,
          54970,	54970,	63390,	63390,	12710,	6371,	12710,	12710,
          0,	54970,	54970,	52857,	12710,	12710,	12710,	0,
          0,	0,	54970,	54970,	12710,	12710,	0,	0
          ]]}
        {%- endif  %}
        {%- if phase == 'last_quarter'  %}
          {"db":[{{x}},{{y}},8,8,[
          0,	0,	54970,	54970,	12710,	12710,	0,	0,
          0,	54970,	54970,	63390,	12710,	12710,	12710,	0,
          54970,	54970,	63390,	63390,	6371,	6371,	12710,	12710,
          54970,	63390,	52857,	63390,	6371,	12710,	12710,	12710,
          54970,	63390,	52857,	63390,	12710,	12710,	12710,	12710,
          54970,	54970,	63390,	63390,	12710,	6371,	12710,	12710,
          0,	54970,	54970,	52857,	12710,	12710,	12710,	0,
          0,	0,	54970,	54970,	12710,	12710,	0,	0
          ]]}
        {%- endif  %}
        {%- if phase == 'waning_crescent'  %}
          {"db":[{{x}},{{y}},8,8,[
          0,	0,	54970,	54970,	10565,	10565,	0,	0,
          0,	54970,	54970,	10565,	10565,	10565,	10565,	0,
          54970,	54970,	10565,	10565,	6371,	6371,	10565,	10565,
          54970,	63390,	6371,	10565,	6371,	10565,	10565,	10565,
          54970,	63390,	6371,	10565,	10565,	10565,	10565,	10565,
          54970,	54970,	10565,	10565,	10565,	6371,	10565,	10565,
          0,	54970,	54970,	6371,	10565,	10565,	10565,	0,
          0,	0,	54970,	54970,	10565,	10565,	0,	0
          ]]}
        {%- endif  %}
        {%- if phase == 'new'  %}
          {"db":[{{x}},{{y}},8,8,[
          0,	0,	10565,	10565,	10565,	10565,	0,	0,
          0,	10565,	10565,	10565,	10565,	10565,	10565,	0,
          10565,	10565,	10565,	10565,	6371,	6371,	10565,	10565,
          10565,	10565,	6371,	10565,	6371,	10565,	10565,	10565,
          10565,	10565,	6371,	10565,	10565,	10565,	10565,	10565,
          10565,	10565,	10565,	10565,	10565,	6371,	10565,	10565,
          0,	10565,	10565,	6371,	10565,	10565,	10565,	0,
          0,	0,	10565,	10565,	10565,	10565,	0,	0
          ]]}
        {%- endif  %}
        {%- if phase == 'waxing_crescent'  %}
          {"db":[{{x}},{{y}},8,8,[
          0,	0,	12678,	12678,	54970,	54970,	0,	0,
          0,	12678,	12678,	12678,	12678,	54970,	54970,	0,
          12678,	12678,	12678,	12678,	6339,	6339,	54970,	54970,
          12678,	12678,	6339,	12678,	6339,	12678,	63390,	54970,
          12678,	12678,	6339,	12678,	12678,	12678,	63390,	54970,
          12678,	12678,	12678,	12678,	12678,	6339,	54970,	54970,
          0,	12678,	12678,	12678,	12678,	54970,	54970,	0,
          0,	0,	12678,	12678,	54970,	54970,	0,	0
          ]]}
        {%- endif  %}
        {%- if phase == 'first_quarter'  %}
          {"db":[{{x}},{{y}},8,8,[
          0,	0,	12678,	12678,	54970,	54970,	0,	0,
          0,	12678,	12678,	12678,	63390,	54970,	54970,	0,
          12678,	12678,	12678,	12678,	52825,	52825,	54970,	54970,
          12678,	12678,	6339,	12678,	52825,	63390,	63390,	54970,
          12678,	12678,	6339,	12678,	63390,	63390,	63390,	54970,
          12678,	12678,	12678,	12678,	63390,	52825,	54970,	54970,
          0,	12678,	12678,	12678,	63390,	54970,	54970,	0,
          0,	0,	12678,	12678,	54970,	54970,	0,	0
          ]]}
        {%- endif  %}
        {%- if phase == 'waxing_gibbous'  %}
          {"db":[{{x}},{{y}},8,8,[
          0,	0,	12678,	12678,	54970,	54970,	0,	0,
          0,	12678,	12678,	54970,	63390,	54970,	54970,	0,
          12678,	12678,	63390,	63390,	50712,	50712,	54970,	54970,
          12678,	12678,	50712,	63390,	50712,	63390,	63390,	54970,
          12678,	12678,	50712,	63390,	63390,	63390,	63390,	54970,
          12678,	12678,	63390,	63390,	63390,	50712,	54970,	54970,
          0,	12678,	12678,	50712,	63390,	54970,	54970,	0,
          0,	0,	12678,	12678,	54970,	54970,	0,	0
          ]]}
        {%- endif  %}

    {% endmacro %}
    {{hi(moon_phase,22,0)}}

  payload: >
    {%- macro interpolate(dictionary, x) -%}
      {%- set sorted_keys = dictionary|dictsort -%}
      {%- set above = sorted_keys|selectattr('0', 'gt', x)|map(attribute='0')|list|first -%}
      {%- set below = sorted_keys|selectattr('0', 'lt', x)|map(attribute='0')|list|last -%}

      {#- Key matches x exactly -#}
      {%- if above is defined and dictionary[above] == x -%}
        {%- set value = dictionary[above] -%}
        {{ value }}
      {%- elif below is defined and dictionary[below] == x -%}
        {%- set value = dictionary[below] -%}
        {{ value }}
      {#- Interpolation between two values -#}
      {%- elif below is defined and above is defined -%}
        {%- set lower_value = dictionary[below] -%}
        {%- set upper_value = dictionary[above] -%}
        {%- set lower_rgb = lower_value[1:] -%}
        {%- set upper_rgb = upper_value[1:] -%}

        {%- set lower_r = lower_rgb[0:2]|int(base=16) -%}
        {%- set lower_g = lower_rgb[2:4]|int(base=16) -%}
        {%- set lower_b = lower_rgb[4:6]|int(base=16) -%}

        {%- set upper_r = upper_rgb[0:2]|int(base=16) -%}
        {%- set upper_g = upper_rgb[2:4]|int(base=16) -%}
        {%- set upper_b = upper_rgb[4:6]|int(base=16) -%}

        {%- set interpolation_factor = (x - below) / (above - below) -%}
        {%- set interpolated_r = ((1 - interpolation_factor) * lower_r + interpolation_factor * upper_r)|int -%}
        {%- set interpolated_g = ((1 - interpolation_factor) * lower_g + interpolation_factor * upper_g)|int -%}
        {%- set interpolated_b = ((1 - interpolation_factor) * lower_b + interpolation_factor * upper_b)|int -%}

        {%- set interpolated_hex = '#' ~ '%02X' % interpolated_r ~ '%02X' % interpolated_g ~ '%02X' % interpolated_b -%}
        {{ interpolated_hex }}
      {#- Only below key available -#}
      {%- elif below is defined -%}
        {%- set value = dictionary[below] -%}
        {{ value }}
      {#- Only above key available -#}
      {%- elif above is defined -%}
        {%- set value = dictionary[above] -%}
        {{ value }}
      {#- No matching keys available -#}
      {%- else -%}
        No matching key found.
      {%- endif -%}
    {%- endmacro -%}

    {#- Define macro to get length of the forecast}
    {%- macro str_len(str) %}
    {%- if '.' in str %}
    {%- set char_count = (str | length) -1 %}{{char_count * 3 + 1 + char_count}}
    {%- else %}
    {%- set char_count = (str | length) %}{{char_count * 3 + (char_count - 1)}}    
    {%- endif %}
    {%- endmacro %}

    {#- Define a macro to draw out the forecast lines#}
    {%- macro draw_forecast_lines(x,hours,height) %}
      {%- for hour in range(hours) %}
        {%- if height == 0 %}
          {"dp": [{{x+hour}},7,"{{interpolate(color_dict, forecast[hour][forecast_temp_field]) }}"]}
        {%- else %}
          {"dl": [{{x+hour}},7,{{x+hour}},{{7 - height}},"{{interpolate(color_dict, forecast[hour][forecast_temp_field]) }}"]}
        {%- endif %}
        {%- if hour+1 != hours %},{%endif%}
      {%- endfor %}
    {%- endmacro %}
    {# Define the color mapping dictionary #}

    { "text": [
      {"t":"{{ current_temp}}°",
      "c":"{{interpolate(color_dict, current_temp | float)}}"}
      ],
    "draw": [
      {{draw_forecast_lines(8,24,0)}}{% if moon_risen %}, {{moon_data}} {% endif %}
    ],
    "icon": "{{icon}}",
    "duration": 30,
    "pushIcon": 2,
    "lifetime": 120,
    "weather": "{{weather}}"
    }

trigger:
  - platform: time_pattern
    seconds: /5
  - platform: state
    entity_id: !input forecast_var
    id: Changes
    enabled: true

condition: []
action:
  - service: mqtt.publish
    data:
      qos: 0
      topic: "{{message_topic}}"
      payload: >
        {{payload}}
